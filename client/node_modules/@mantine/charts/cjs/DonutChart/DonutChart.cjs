'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var recharts = require('recharts');
var core = require('@mantine/core');
var ChartTooltip = require('../ChartTooltip/ChartTooltip.cjs');
var DonutChart_module = require('./DonutChart.module.css.cjs');

const defaultProps = {
  withTooltip: true,
  withLabelsLine: true,
  paddingAngle: 0,
  thickness: 20,
  size: 160,
  strokeWidth: 1,
  startAngle: 0,
  endAngle: 360,
  tooltipDataSource: "all"
};
const varsResolver = core.createVarsResolver(
  (theme, { strokeColor, labelColor, withLabels, size }) => ({
    root: {
      "--chart-stroke-color": strokeColor ? core.getThemeColor(strokeColor, theme) : void 0,
      "--chart-labels-color": labelColor ? core.getThemeColor(labelColor, theme) : void 0,
      "--chart-size": withLabels ? core.rem(size + 80) : core.rem(size)
    }
  })
);
const DonutChart = core.factory((_props, ref) => {
  const props = core.useProps("DonutChart", defaultProps, _props);
  const {
    classNames,
    className,
    style,
    styles,
    unstyled,
    vars,
    data,
    withTooltip,
    tooltipAnimationDuration,
    tooltipProps,
    pieProps,
    paddingAngle,
    withLabels,
    withLabelsLine,
    size,
    thickness,
    strokeWidth,
    startAngle,
    endAngle,
    tooltipDataSource,
    chartLabel,
    children,
    pieChartProps,
    valueFormatter,
    strokeColor,
    ...others
  } = props;
  const theme = core.useMantineTheme();
  const getStyles = core.useStyles({
    name: "DonutChart",
    classes: DonutChart_module,
    props,
    className,
    style,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver
  });
  const { resolvedClassNames, resolvedStyles } = core.useResolvedStylesApi({
    classNames,
    styles,
    props
  });
  const cells = data.map((item, index) => /* @__PURE__ */ jsxRuntime.jsx(
    recharts.Cell,
    {
      fill: core.getThemeColor(item.color, theme),
      stroke: "var(--chart-stroke-color, var(--mantine-color-body))",
      strokeWidth
    },
    index
  ));
  return /* @__PURE__ */ jsxRuntime.jsx(core.Box, { ref, size, ...getStyles("root"), ...others, children: /* @__PURE__ */ jsxRuntime.jsx(recharts.ResponsiveContainer, { children: /* @__PURE__ */ jsxRuntime.jsxs(recharts.PieChart, { ...pieChartProps, children: [
    /* @__PURE__ */ jsxRuntime.jsx(
      recharts.Pie,
      {
        data,
        innerRadius: size / 2 - thickness,
        outerRadius: size / 2,
        dataKey: "value",
        isAnimationActive: false,
        paddingAngle,
        startAngle,
        endAngle,
        label: withLabels ? {
          fill: "var(--chart-labels-color, var(--mantine-color-dimmed))",
          fontSize: 12,
          fontFamily: "var(--mantine-font-family)"
        } : false,
        labelLine: withLabelsLine ? {
          stroke: "var(--chart-label-color, var(--mantine-color-dimmed))",
          strokeWidth: 1
        } : false,
        ...pieProps,
        children: cells
      }
    ),
    chartLabel && /* @__PURE__ */ jsxRuntime.jsx(
      "text",
      {
        x: "50%",
        y: "50%",
        textAnchor: "middle",
        dominantBaseline: "middle",
        ...getStyles("label"),
        children: chartLabel
      }
    ),
    withTooltip && /* @__PURE__ */ jsxRuntime.jsx(
      recharts.Tooltip,
      {
        animationDuration: tooltipAnimationDuration,
        isAnimationActive: false,
        content: ({ payload }) => /* @__PURE__ */ jsxRuntime.jsx(
          ChartTooltip.ChartTooltip,
          {
            payload: data,
            classNames: resolvedClassNames,
            styles: resolvedStyles,
            type: "radial",
            segmentId: tooltipDataSource === "segment" ? payload?.[0]?.name : void 0,
            valueFormatter
          }
        ),
        ...tooltipProps
      }
    ),
    children
  ] }) }) });
});
DonutChart.displayName = "@mantine/charts/DonutChart";
DonutChart.classes = DonutChart_module;

exports.DonutChart = DonutChart;
//# sourceMappingURL=DonutChart.cjs.map
