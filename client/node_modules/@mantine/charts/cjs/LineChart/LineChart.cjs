'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var recharts = require('recharts');
var core = require('@mantine/core');
var hooks = require('@mantine/hooks');
var ChartLegend = require('../ChartLegend/ChartLegend.cjs');
var ChartTooltip = require('../ChartTooltip/ChartTooltip.cjs');
var gridChart_module = require('../grid-chart.module.css.cjs');

const defaultProps = {
  withXAxis: true,
  withYAxis: true,
  withTooltip: true,
  tooltipAnimationDuration: 0,
  fillOpacity: 1,
  tickLine: "y",
  strokeDasharray: "5 5",
  gridAxis: "x",
  withDots: true,
  connectNulls: true,
  strokeWidth: 2,
  curveType: "monotone",
  gradientStops: [
    { offset: 0, color: "red" },
    { offset: 100, color: "blue" }
  ]
};
const varsResolver = core.createVarsResolver((theme, { textColor, gridColor }) => ({
  root: {
    "--chart-text-color": textColor ? core.getThemeColor(textColor, theme) : void 0,
    "--chart-grid-color": gridColor ? core.getThemeColor(gridColor, theme) : void 0
  }
}));
const LineChart = core.factory((_props, ref) => {
  const props = core.useProps("LineChart", defaultProps, _props);
  const {
    classNames,
    className,
    style,
    styles,
    unstyled,
    vars,
    data,
    withLegend,
    legendProps,
    series,
    onMouseLeave,
    dataKey,
    withTooltip,
    withXAxis,
    withYAxis,
    gridAxis,
    tickLine,
    xAxisProps,
    yAxisProps,
    unit,
    tooltipAnimationDuration,
    strokeDasharray,
    gridProps,
    tooltipProps,
    referenceLines,
    withDots,
    dotProps,
    activeDotProps,
    strokeWidth,
    lineChartProps,
    connectNulls,
    fillOpacity,
    curveType,
    orientation,
    dir,
    valueFormatter,
    children,
    lineProps,
    xAxisLabel,
    yAxisLabel,
    type,
    gradientStops,
    withRightYAxis,
    rightYAxisLabel,
    rightYAxisProps,
    ...others
  } = props;
  const theme = core.useMantineTheme();
  const withXTickLine = gridAxis !== "none" && (tickLine === "x" || tickLine === "xy");
  const withYTickLine = gridAxis !== "none" && (tickLine === "y" || tickLine === "xy");
  const [highlightedArea, setHighlightedArea] = react.useState(null);
  const shouldHighlight = highlightedArea !== null;
  const handleMouseLeave = (event) => {
    setHighlightedArea(null);
    onMouseLeave?.(event);
  };
  const { resolvedClassNames, resolvedStyles } = core.useResolvedStylesApi({
    classNames,
    styles,
    props
  });
  const getStyles = core.useStyles({
    name: "LineChart",
    classes: gridChart_module,
    props,
    className,
    style,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver
  });
  const id = hooks.useId();
  const gradientId = `line-chart-gradient-${id}`;
  const stops = gradientStops?.map((stop) => /* @__PURE__ */ jsxRuntime.jsx(
    "stop",
    {
      offset: `${stop.offset}%`,
      stopColor: core.getThemeColor(stop.color, theme)
    },
    stop.color
  ));
  const lines = series.map((item) => {
    const color = core.getThemeColor(item.color, theme);
    const dimmed = shouldHighlight && highlightedArea !== item.name;
    return /* @__PURE__ */ react.createElement(
      recharts.Line,
      {
        ...getStyles("line"),
        key: item.name,
        name: item.name,
        dataKey: item.name,
        dot: withDots ? {
          fillOpacity: dimmed ? 0 : 1,
          strokeOpacity: dimmed ? 0 : 1,
          strokeWidth: 1,
          fill: type === "gradient" ? "var(--mantine-color-gray-7)" : color,
          stroke: type === "gradient" ? "white" : color,
          ...dotProps
        } : false,
        activeDot: withDots ? {
          fill: type === "gradient" ? "var(--mantine-color-gray-7)" : color,
          stroke: type === "gradient" ? "white" : color,
          ...activeDotProps
        } : false,
        fill: color,
        stroke: type === "gradient" ? `url(#${gradientId})` : color,
        strokeWidth,
        isAnimationActive: false,
        fillOpacity: dimmed ? 0 : fillOpacity,
        strokeOpacity: dimmed ? 0.5 : fillOpacity,
        connectNulls,
        type: curveType,
        strokeDasharray: item.strokeDasharray,
        yAxisId: item.yAxisId || "left",
        ...typeof lineProps === "function" ? lineProps(item) : lineProps
      }
    );
  });
  const referenceLinesItems = referenceLines?.map((line, index) => {
    const color = core.getThemeColor(line.color, theme);
    return /* @__PURE__ */ jsxRuntime.jsx(
      recharts.ReferenceLine,
      {
        stroke: line.color ? color : "var(--chart-grid-color)",
        strokeWidth: 1,
        yAxisId: line.yAxisId || "left",
        ...line,
        label: {
          value: line.label,
          fill: line.color ? color : "currentColor",
          fontSize: 12,
          position: line.labelPosition ?? "insideBottomLeft"
        },
        ...getStyles("referenceLine")
      },
      index
    );
  });
  const sharedYAxisProps = {
    axisLine: false,
    ...orientation === "vertical" ? { dataKey, type: "category" } : { type: "number" },
    tickLine: withYTickLine ? { stroke: "currentColor" } : false,
    allowDecimals: true,
    unit,
    tickFormatter: valueFormatter,
    ...getStyles("axis")
  };
  return /* @__PURE__ */ jsxRuntime.jsx(
    core.Box,
    {
      ref,
      ...getStyles("root"),
      onMouseLeave: handleMouseLeave,
      dir: dir || "ltr",
      ...others,
      children: /* @__PURE__ */ jsxRuntime.jsx(recharts.ResponsiveContainer, { ...getStyles("container"), children: /* @__PURE__ */ jsxRuntime.jsxs(
        recharts.LineChart,
        {
          data,
          layout: orientation,
          margin: {
            bottom: xAxisLabel ? 30 : void 0,
            left: yAxisLabel ? 10 : void 0,
            right: yAxisLabel ? 5 : void 0
          },
          ...lineChartProps,
          children: [
            type === "gradient" && /* @__PURE__ */ jsxRuntime.jsx("defs", { children: /* @__PURE__ */ jsxRuntime.jsx("linearGradient", { id: gradientId, x1: "0", y1: "0", x2: "0", y2: "1", children: stops }) }),
            withLegend && /* @__PURE__ */ jsxRuntime.jsx(
              recharts.Legend,
              {
                verticalAlign: "top",
                content: (payload) => /* @__PURE__ */ jsxRuntime.jsx(
                  ChartLegend.ChartLegend,
                  {
                    payload: payload.payload,
                    onHighlight: setHighlightedArea,
                    legendPosition: legendProps?.verticalAlign || "top",
                    classNames: resolvedClassNames,
                    styles: resolvedStyles,
                    series,
                    showColor: type !== "gradient"
                  }
                ),
                ...legendProps
              }
            ),
            /* @__PURE__ */ jsxRuntime.jsxs(
              recharts.XAxis,
              {
                hide: !withXAxis,
                ...orientation === "vertical" ? { type: "number" } : { dataKey },
                tick: { transform: "translate(0, 10)", fontSize: 12, fill: "currentColor" },
                stroke: "",
                interval: "preserveStartEnd",
                tickLine: withXTickLine ? { stroke: "currentColor" } : false,
                minTickGap: 5,
                ...getStyles("axis"),
                ...xAxisProps,
                children: [
                  xAxisLabel && /* @__PURE__ */ jsxRuntime.jsx(recharts.Label, { position: "insideBottom", offset: -20, fontSize: 12, ...getStyles("axisLabel"), children: xAxisLabel }),
                  xAxisProps?.children
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntime.jsxs(
              recharts.YAxis,
              {
                yAxisId: "left",
                orientation: "left",
                tick: { transform: "translate(-10, 0)", fontSize: 12, fill: "currentColor" },
                hide: !withYAxis,
                ...sharedYAxisProps,
                ...yAxisProps,
                children: [
                  yAxisLabel && /* @__PURE__ */ jsxRuntime.jsx(
                    recharts.Label,
                    {
                      position: "insideLeft",
                      angle: -90,
                      textAnchor: "middle",
                      fontSize: 12,
                      offset: -5,
                      ...getStyles("axisLabel"),
                      children: yAxisLabel
                    }
                  ),
                  yAxisProps?.children
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntime.jsxs(
              recharts.YAxis,
              {
                yAxisId: "right",
                orientation: "right",
                tick: { transform: "translate(10, 0)", fontSize: 12, fill: "currentColor" },
                hide: !withRightYAxis,
                ...sharedYAxisProps,
                ...rightYAxisProps,
                children: [
                  rightYAxisLabel && /* @__PURE__ */ jsxRuntime.jsx(
                    recharts.Label,
                    {
                      position: "insideRight",
                      angle: 90,
                      textAnchor: "middle",
                      fontSize: 12,
                      offset: -5,
                      ...getStyles("axisLabel"),
                      children: rightYAxisLabel
                    }
                  ),
                  yAxisProps?.children
                ]
              }
            ),
            /* @__PURE__ */ jsxRuntime.jsx(
              recharts.CartesianGrid,
              {
                strokeDasharray,
                vertical: gridAxis === "y" || gridAxis === "xy",
                horizontal: gridAxis === "x" || gridAxis === "xy",
                ...getStyles("grid"),
                ...gridProps
              }
            ),
            withTooltip && /* @__PURE__ */ jsxRuntime.jsx(
              recharts.Tooltip,
              {
                animationDuration: tooltipAnimationDuration,
                isAnimationActive: tooltipAnimationDuration !== 0,
                position: orientation === "vertical" ? {} : { y: 0 },
                cursor: {
                  stroke: "var(--chart-grid-color)",
                  strokeWidth: 1,
                  strokeDasharray
                },
                content: ({ label, payload }) => /* @__PURE__ */ jsxRuntime.jsx(
                  ChartTooltip.ChartTooltip,
                  {
                    label,
                    payload,
                    unit,
                    classNames: resolvedClassNames,
                    styles: resolvedStyles,
                    series,
                    valueFormatter,
                    showColor: type !== "gradient"
                  }
                ),
                ...tooltipProps
              }
            ),
            lines,
            referenceLinesItems,
            children
          ]
        }
      ) })
    }
  );
});
LineChart.displayName = "@mantine/charts/LineChart";
LineChart.classes = gridChart_module;

exports.LineChart = LineChart;
//# sourceMappingURL=LineChart.cjs.map
