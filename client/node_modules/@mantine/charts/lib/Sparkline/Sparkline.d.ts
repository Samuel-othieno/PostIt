import { AreaProps } from 'recharts';
import { BoxProps, ElementProps, Factory, MantineColor, StylesApiProps } from '@mantine/core';
import { AreaChartCurveType } from '../AreaChart';
export interface SparklineTrendColors {
    positive: MantineColor;
    negative: MantineColor;
    neutral?: MantineColor;
}
export type SparklineStylesNames = 'root';
export type SparklineCssVariables = {
    root: '--chart-color';
};
export interface SparklineProps extends BoxProps, StylesApiProps<SparklineFactory>, ElementProps<'div'> {
    /** Data used to render the chart */
    data: (number | null)[];
    /** Key of `theme.colors` or any valid CSS color, `theme.primaryColor` by default */
    color?: MantineColor;
    /** Determines whether the chart fill should be a gradient, `true` by default */
    withGradient?: boolean;
    /** Controls fill opacity of the area, `0.6` by default */
    fillOpacity?: number;
    /** Type of the curve, `'linear'` by default */
    curveType?: AreaChartCurveType;
    /** Area stroke width, `2` by default */
    strokeWidth?: number;
    /** If set, `color` prop is ignored and chart color is determined by the difference between first and last value. */
    trendColors?: SparklineTrendColors;
    /** Determines whether null values should be connected with other values, `true` by default */
    connectNulls?: boolean;
    /** Props passed down to the underlying recharts `Area` component */
    areaProps?: Omit<AreaProps, 'data' | 'dataKey' | 'ref'>;
}
export type SparklineFactory = Factory<{
    props: SparklineProps;
    ref: HTMLDivElement;
    stylesNames: SparklineStylesNames;
    vars: SparklineCssVariables;
}>;
export declare const Sparkline: import("@mantine/core").MantineComponent<{
    props: SparklineProps;
    ref: HTMLDivElement;
    stylesNames: SparklineStylesNames;
    vars: SparklineCssVariables;
}>;
