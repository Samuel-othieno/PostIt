import { DotProps, LineProps, LineChart as ReChartsLineChart } from 'recharts';
import { BoxProps, ElementProps, Factory, MantineColor, StylesApiProps } from '@mantine/core';
import { ChartLegendStylesNames } from '../ChartLegend';
import { ChartTooltipStylesNames } from '../ChartTooltip';
import type { BaseChartStylesNames, ChartSeries, GridChartBaseProps } from '../types';
export type LineChartType = 'default' | 'gradient';
export interface LineChartGradientStop {
    offset: number;
    color: MantineColor;
}
export type LineChartCurveType = 'bump' | 'linear' | 'natural' | 'monotone' | 'step' | 'stepBefore' | 'stepAfter';
export interface LineChartSeries extends ChartSeries {
    strokeDasharray?: string | number;
}
export type LineChartStylesNames = 'line' | BaseChartStylesNames | ChartLegendStylesNames | ChartTooltipStylesNames;
export type LineChartCssVariables = {
    root: '--chart-text-color' | '--chart-grid-color';
};
export interface LineChartProps extends BoxProps, GridChartBaseProps, StylesApiProps<LineChartFactory>, ElementProps<'div'> {
    /** Data used to display chart */
    data: Record<string, any>[];
    /** An array of objects with `name` and `color` keys. Determines which data should be consumed from the `data` array. */
    series: LineChartSeries[];
    /** Controls styles of the line, `'default'` by default */
    type?: LineChartType;
    /** Data used to generate gradient stops, `[{ offset: 0, color: 'red' }, { offset: 100, color: 'blue' }]` by default */
    gradientStops?: LineChartGradientStop[];
    /** Type of the curve, `'monotone'` by default */
    curveType?: LineChartCurveType;
    /** Controls fill opacity of all lines, `1` by default */
    fillOpacity?: number;
    /** Determines whether dots should be displayed, `true` by default */
    withDots?: boolean;
    /** Props passed down to all dots. Ignored if `withDots={false}` is set. */
    dotProps?: Omit<DotProps, 'ref'>;
    /** Props passed down to all active dots. Ignored if `withDots={false}` is set. */
    activeDotProps?: Omit<DotProps, 'ref'>;
    /** Stroke width for the chart lines, `2` by default */
    strokeWidth?: number;
    /** Props passed down to recharts `LineChart` component */
    lineChartProps?: React.ComponentPropsWithoutRef<typeof ReChartsLineChart>;
    /** Determines whether points with `null` values should be connected, `true` by default */
    connectNulls?: boolean;
    /** Additional components that are rendered inside recharts `AreaChart` component */
    children?: React.ReactNode;
    /** Props passed down to recharts `Area` component */
    lineProps?: ((series: LineChartSeries) => Partial<Omit<LineProps, 'ref'>>) | Partial<Omit<LineProps, 'ref'>>;
}
export type LineChartFactory = Factory<{
    props: LineChartProps;
    ref: HTMLDivElement;
    stylesNames: LineChartStylesNames;
    vars: LineChartCssVariables;
}>;
export declare const LineChart: import("@mantine/core").MantineComponent<{
    props: LineChartProps;
    ref: HTMLDivElement;
    stylesNames: LineChartStylesNames;
    vars: LineChartCssVariables;
}>;
