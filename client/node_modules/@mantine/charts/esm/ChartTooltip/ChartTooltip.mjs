'use client';
import { jsxs, jsx } from 'react/jsx-runtime';
import { factory, useProps, useMantineTheme, useStyles, ColorSwatch, getThemeColor, Box } from '@mantine/core';
import { getSeriesLabels } from '../utils/get-series-labels/get-series-labels.mjs';
import classes from './ChartTooltip.module.css.mjs';

function updateChartTooltipPayload(payload) {
  return payload.map((item) => {
    const newDataKey = item.name.split(".").pop();
    return {
      ...item,
      name: newDataKey
    };
  });
}
function getFilteredChartTooltipPayload(payload, segmentId) {
  const duplicatesFilter = updateChartTooltipPayload(
    payload.filter((item) => item.fill !== "none" || !item.color)
  );
  if (!segmentId) {
    return duplicatesFilter;
  }
  return duplicatesFilter.filter((item) => item.name === segmentId);
}
function getData(item, type) {
  if (type === "radial" || type === "scatter") {
    if (Array.isArray(item.value)) {
      return item.value[1] - item.value[0];
    }
    return item.value;
  }
  if (Array.isArray(item.payload[item.dataKey])) {
    return item.payload[item.dataKey][1] - item.payload[item.dataKey][0];
  }
  return item.payload[item.dataKey];
}
const defaultProps = {
  type: "area",
  showColor: true
};
const ChartTooltip = factory((_props, ref) => {
  const props = useProps("ChartTooltip", defaultProps, _props);
  const {
    classNames,
    className,
    style,
    styles,
    unstyled,
    vars,
    payload,
    label,
    unit,
    type,
    segmentId,
    mod,
    series,
    valueFormatter,
    showColor,
    ...others
  } = props;
  const theme = useMantineTheme();
  const getStyles = useStyles({
    name: "ChartTooltip",
    classes,
    props,
    className,
    style,
    classNames,
    styles,
    unstyled
  });
  if (!payload) {
    return null;
  }
  const filteredPayload = getFilteredChartTooltipPayload(payload, segmentId);
  const scatterLabel = type === "scatter" ? payload[0]?.payload?.name : null;
  const labels = getSeriesLabels(series);
  const _label = label || scatterLabel;
  const items = filteredPayload.map((item) => /* @__PURE__ */ jsxs("div", { "data-type": type, ...getStyles("tooltipItem"), children: [
    /* @__PURE__ */ jsxs("div", { ...getStyles("tooltipItemBody"), children: [
      showColor && /* @__PURE__ */ jsx(
        ColorSwatch,
        {
          color: getThemeColor(item.color, theme),
          size: 12,
          ...getStyles("tooltipItemColor"),
          withShadow: false
        }
      ),
      /* @__PURE__ */ jsx("div", { ...getStyles("tooltipItemName"), children: labels[item.name] || item.name })
    ] }),
    /* @__PURE__ */ jsxs("div", { ...getStyles("tooltipItemData"), children: [
      typeof valueFormatter === "function" ? valueFormatter(getData(item, type)) : getData(item, type),
      unit || item.unit
    ] })
  ] }, item?.key ?? item.name));
  return /* @__PURE__ */ jsxs(Box, { ...getStyles("tooltip"), mod: [{ type }, mod], ref, ...others, children: [
    _label && /* @__PURE__ */ jsx("div", { ...getStyles("tooltipLabel"), children: _label }),
    /* @__PURE__ */ jsx("div", { ...getStyles("tooltipBody"), children: items })
  ] });
});
ChartTooltip.displayName = "@mantine/charts/ChartTooltip";

export { ChartTooltip, getFilteredChartTooltipPayload };
//# sourceMappingURL=ChartTooltip.mjs.map
