'use client';
import { jsx, jsxs } from 'react/jsx-runtime';
import { Cell, ResponsiveContainer, PieChart, Pie, Tooltip } from 'recharts';
import { createVarsResolver, getThemeColor, rem, factory, useProps, useMantineTheme, useStyles, useResolvedStylesApi, Box } from '@mantine/core';
import { ChartTooltip } from '../ChartTooltip/ChartTooltip.mjs';
import classes from './DonutChart.module.css.mjs';

const defaultProps = {
  withTooltip: true,
  withLabelsLine: true,
  paddingAngle: 0,
  thickness: 20,
  size: 160,
  strokeWidth: 1,
  startAngle: 0,
  endAngle: 360,
  tooltipDataSource: "all"
};
const varsResolver = createVarsResolver(
  (theme, { strokeColor, labelColor, withLabels, size }) => ({
    root: {
      "--chart-stroke-color": strokeColor ? getThemeColor(strokeColor, theme) : void 0,
      "--chart-labels-color": labelColor ? getThemeColor(labelColor, theme) : void 0,
      "--chart-size": withLabels ? rem(size + 80) : rem(size)
    }
  })
);
const DonutChart = factory((_props, ref) => {
  const props = useProps("DonutChart", defaultProps, _props);
  const {
    classNames,
    className,
    style,
    styles,
    unstyled,
    vars,
    data,
    withTooltip,
    tooltipAnimationDuration,
    tooltipProps,
    pieProps,
    paddingAngle,
    withLabels,
    withLabelsLine,
    size,
    thickness,
    strokeWidth,
    startAngle,
    endAngle,
    tooltipDataSource,
    chartLabel,
    children,
    pieChartProps,
    valueFormatter,
    strokeColor,
    ...others
  } = props;
  const theme = useMantineTheme();
  const getStyles = useStyles({
    name: "DonutChart",
    classes,
    props,
    className,
    style,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver
  });
  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
    classNames,
    styles,
    props
  });
  const cells = data.map((item, index) => /* @__PURE__ */ jsx(
    Cell,
    {
      fill: getThemeColor(item.color, theme),
      stroke: "var(--chart-stroke-color, var(--mantine-color-body))",
      strokeWidth
    },
    index
  ));
  return /* @__PURE__ */ jsx(Box, { ref, size, ...getStyles("root"), ...others, children: /* @__PURE__ */ jsx(ResponsiveContainer, { children: /* @__PURE__ */ jsxs(PieChart, { ...pieChartProps, children: [
    /* @__PURE__ */ jsx(
      Pie,
      {
        data,
        innerRadius: size / 2 - thickness,
        outerRadius: size / 2,
        dataKey: "value",
        isAnimationActive: false,
        paddingAngle,
        startAngle,
        endAngle,
        label: withLabels ? {
          fill: "var(--chart-labels-color, var(--mantine-color-dimmed))",
          fontSize: 12,
          fontFamily: "var(--mantine-font-family)"
        } : false,
        labelLine: withLabelsLine ? {
          stroke: "var(--chart-label-color, var(--mantine-color-dimmed))",
          strokeWidth: 1
        } : false,
        ...pieProps,
        children: cells
      }
    ),
    chartLabel && /* @__PURE__ */ jsx(
      "text",
      {
        x: "50%",
        y: "50%",
        textAnchor: "middle",
        dominantBaseline: "middle",
        ...getStyles("label"),
        children: chartLabel
      }
    ),
    withTooltip && /* @__PURE__ */ jsx(
      Tooltip,
      {
        animationDuration: tooltipAnimationDuration,
        isAnimationActive: false,
        content: ({ payload }) => /* @__PURE__ */ jsx(
          ChartTooltip,
          {
            payload: data,
            classNames: resolvedClassNames,
            styles: resolvedStyles,
            type: "radial",
            segmentId: tooltipDataSource === "segment" ? payload?.[0]?.name : void 0,
            valueFormatter
          }
        ),
        ...tooltipProps
      }
    ),
    children
  ] }) }) });
});
DonutChart.displayName = "@mantine/charts/DonutChart";
DonutChart.classes = classes;

export { DonutChart };
//# sourceMappingURL=DonutChart.mjs.map
