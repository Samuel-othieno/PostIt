'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var core = require('@mantine/core');
var labels = require('./labels.cjs');
var RichTextEditor_context = require('./RichTextEditor.context.cjs');
var RichTextEditorContent = require('./RichTextEditorContent/RichTextEditorContent.cjs');
var controls = require('./RichTextEditorControl/controls.cjs');
var RichTextEditorLinkControl = require('./RichTextEditorControl/RichTextEditorLinkControl.cjs');
var RichTextEditorColorPickerControl = require('./RichTextEditorControl/RichTextEditorColorPickerControl.cjs');
var RichTextEditorColorControl = require('./RichTextEditorControl/RichTextEditorColorControl.cjs');
var RichTextEditorControl = require('./RichTextEditorControl/RichTextEditorControl.cjs');
var RichTextEditorControlsGroup = require('./RichTextEditorControlsGroup/RichTextEditorControlsGroup.cjs');
var RichTextEditorToolbar = require('./RichTextEditorToolbar/RichTextEditorToolbar.cjs');
var RichTextEditor_module = require('./RichTextEditor.module.css.cjs');

const defaultProps = {
  withCodeHighlightStyles: true,
  withTypographyStyles: true
};
const RichTextEditor = core.factory((_props, ref) => {
  const props = core.useProps("RichTextEditor", defaultProps, _props);
  const {
    classNames,
    className,
    style,
    styles,
    unstyled,
    vars,
    editor,
    withCodeHighlightStyles,
    withTypographyStyles,
    labels: labels$1,
    children,
    ...others
  } = props;
  const getStyles = core.useStyles({
    name: "RichTextEditor",
    classes: RichTextEditor_module,
    props,
    className,
    style,
    classNames,
    styles,
    unstyled,
    vars
  });
  const mergedLabels = react.useMemo(() => ({ ...labels.DEFAULT_LABELS, ...labels$1 }), [labels$1]);
  return /* @__PURE__ */ jsxRuntime.jsx(
    RichTextEditor_context.RichTextEditorProvider,
    {
      value: {
        editor,
        getStyles,
        labels: mergedLabels,
        withCodeHighlightStyles,
        withTypographyStyles,
        unstyled
      },
      children: /* @__PURE__ */ jsxRuntime.jsx(core.Box, { ...getStyles("root"), ...others, ref, children })
    }
  );
});
RichTextEditor.classes = RichTextEditor_module;
RichTextEditor.displayName = "@mantine/tiptap/RichTextEditor";
RichTextEditor.Content = RichTextEditorContent.RichTextEditorContent;
RichTextEditor.Control = RichTextEditorControl.RichTextEditorControl;
RichTextEditor.Toolbar = RichTextEditorToolbar.RichTextEditorToolbar;
RichTextEditor.ControlsGroup = RichTextEditorControlsGroup.RichTextEditorControlsGroup;
RichTextEditor.Bold = controls.BoldControl;
RichTextEditor.Italic = controls.ItalicControl;
RichTextEditor.Strikethrough = controls.StrikeThroughControl;
RichTextEditor.Underline = controls.UnderlineControl;
RichTextEditor.ClearFormatting = controls.ClearFormattingControl;
RichTextEditor.H1 = controls.H1Control;
RichTextEditor.H2 = controls.H2Control;
RichTextEditor.H3 = controls.H3Control;
RichTextEditor.H4 = controls.H4Control;
RichTextEditor.H5 = controls.H5Control;
RichTextEditor.H6 = controls.H6Control;
RichTextEditor.BulletList = controls.BulletListControl;
RichTextEditor.OrderedList = controls.OrderedListControl;
RichTextEditor.Link = RichTextEditorLinkControl.RichTextEditorLinkControl;
RichTextEditor.Unlink = controls.UnlinkControl;
RichTextEditor.Blockquote = controls.BlockquoteControl;
RichTextEditor.AlignLeft = controls.AlignLeftControl;
RichTextEditor.AlignRight = controls.AlignRightControl;
RichTextEditor.AlignCenter = controls.AlignCenterControl;
RichTextEditor.AlignJustify = controls.AlignJustifyControl;
RichTextEditor.Superscript = controls.SuperscriptControl;
RichTextEditor.Subscript = controls.SubscriptControl;
RichTextEditor.Code = controls.CodeControl;
RichTextEditor.CodeBlock = controls.CodeBlockControl;
RichTextEditor.ColorPicker = RichTextEditorColorPickerControl.RichTextEditorColorPickerControl;
RichTextEditor.Color = RichTextEditorColorControl.RichTextEditorColorControl;
RichTextEditor.Highlight = controls.HighlightControl;
RichTextEditor.Hr = controls.HrControl;
RichTextEditor.UnsetColor = controls.UnsetColorControl;
RichTextEditor.Undo = controls.UndoControl;
RichTextEditor.Redo = controls.RedoControl;
RichTextEditor.TaskList = controls.TaskListControl;
RichTextEditor.TaskListSink = controls.TaskListSinkControl;
RichTextEditor.TaskListLift = controls.TaskListLiftControl;

exports.RichTextEditor = RichTextEditor;
//# sourceMappingURL=RichTextEditor.cjs.map
